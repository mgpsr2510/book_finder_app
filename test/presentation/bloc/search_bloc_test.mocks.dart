// Mocks generated by Mockito 5.4.2 from annotations
// in book_finder_app/test/presentation/bloc/search_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dartz/dartz.dart' as _i2;
import 'package:book_finder_app/core/error/failures.dart' as _i4;
import 'package:book_finder_app/domain/entities/book.dart' as _i5;
import 'package:book_finder_app/domain/entities/book_search_result.dart' as _i6;
import 'package:book_finder_app/domain/usecases/search_books.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SearchBooks].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchBooks extends _i1.Mock implements _i7.SearchBooks {
  MockSearchBooks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.Either<_i4.Failure, _i6.BookSearchResult>> call({
    required String? query,
    int? page = 1,
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #query: query,
            #page: page,
            #limit: limit,
          },
        ),
        returnValue: _i3.Future<_i2.Either<_i4.Failure, _i6.BookSearchResult>>.value(
            _FakeEither_0<_i4.Failure, _i6.BookSearchResult>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #query: query,
              #page: page,
              #limit: limit,
            },
          ),
        )),
      ) as _i3.Future<_i2.Either<_i4.Failure, _i6.BookSearchResult>>);
}
