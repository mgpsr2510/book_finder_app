// Mocks generated by Mockito 5.4.2 from annotations
// in book_finder_app/test/data/repositories/book_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:book_finder_app/core/error/exceptions.dart' as _i5;
import 'package:book_finder_app/core/network/network_info.dart' as _i6;
import 'package:book_finder_app/data/datasources/book_local_datasource.dart' as _i7;
import 'package:book_finder_app/data/datasources/book_remote_datasource.dart' as _i8;
import 'package:book_finder_app/data/models/book_model.dart' as _i9;
import 'package:book_finder_app/data/models/book_search_result_model.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BookRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookRemoteDataSource extends _i1.Mock implements _i8.BookRemoteDataSource {
  MockBookRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i10.BookSearchResultModel> searchBooks({
    required String? query,
    int? page = 1,
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchBooks,
          [],
          {
            #query: query,
            #page: page,
            #limit: limit,
          },
        ),
        returnValue: _i4.Future<_i10.BookSearchResultModel>.value(
            _FakeBookSearchResultModel_0(
          this,
          Invocation.method(
            #searchBooks,
            [],
            {
              #query: query,
              #page: page,
              #limit: limit,
            },
          ),
        )),
      ) as _i4.Future<_i10.BookSearchResultModel>);

  @override
  _i4.Future<_i9.BookModel> getBookDetails(String? bookId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookDetails,
          [bookId],
        ),
        returnValue: _i4.Future<_i9.BookModel>.value(_FakeBookModel_1(
          this,
          Invocation.method(
            #getBookDetails,
            [bookId],
          ),
        )),
      ) as _i4.Future<_i9.BookModel>);
}

class _FakeBookSearchResultModel_0 extends _i1.SmartFake implements _i10.BookSearchResultModel {
  _FakeBookSearchResultModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBookModel_1 extends _i1.SmartFake implements _i9.BookModel {
  _FakeBookModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BookLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookLocalDataSource extends _i1.Mock implements _i7.BookLocalDataSource {
  MockBookLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveBook(_i9.BookModel? book) => (super.noSuchMethod(
        Invocation.method(
          #saveBook,
          [book],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i9.BookModel>> getSavedBooks() => (super.noSuchMethod(
        Invocation.method(
          #getSavedBooks,
          [],
        ),
        returnValue: _i4.Future<List<_i9.BookModel>>.value(<_i9.BookModel>[]),
      ) as _i4.Future<List<_i9.BookModel>>);

  @override
  _i4.Future<void> removeBook(String? bookId) => (super.noSuchMethod(
        Invocation.method(
          #removeBook,
          [bookId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isBookSaved(String? bookId) => (super.noSuchMethod(
        Invocation.method(
          #isBookSaved,
          [bookId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
